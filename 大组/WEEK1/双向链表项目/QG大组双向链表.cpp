#include<stdio.h>
#include<stdlib.h>
#include<windows.h>
#include<string.h>

void menu()//选择功能界面 
{
	printf("****************************************\n"); 
	printf("***************欢迎进入*****************\n");
	printf("****************************************\n"); 
	printf("*      1.录入                          *\n");
	printf("*      2.打印                          *\n");
	printf("*      3.清空                          *\n");
	printf("*      4.查找                          *\n");
	printf("*      5.修改                          *\n");
	printf("*      6.删除                          *\n");
	printf("*      7.找到双链表的中点              *\n");
	printf("*      8.插入                          *\n");
	printf("*      9.判断双链表是否成环            *\n");
	printf("*      10.退出程序                     *\n");
	printf("*      密码1234                        *\n"); 
	printf("****************************************\n"); 
}  

typedef struct DuLNode 
{
	int data;
	struct DuLNode* next;//双向链表与单向链表的区别： 
	struct DuLNode* prior;//单向一个next，双向有前驱指针和后继指针 
}DuLNode;

typedef struct//定义单链表结构
{
    DuLNode* head; //定义头结点 
}DuLinkedList;

void initList(DuLinkedList* L) //初始化链表
{
	L->head=(DuLNode*)malloc(sizeof(DuLNode));
	if(L->head==NULL)//如果头结点为空，就是内存分配失败的情况 
	{
		printf("内存分配失败\n");
		exit(1);
	}
    L->head->next=NULL;//将后继指针设为空 
	L->head->prior=NULL;//将前驱指针设为空 
}

void inputdata(DuLinkedList*L)//定义录入data函数 尾插法 
{
	int n,data;
    printf("请输入要输入的元素的个数：");
    if(scanf("%d",&n)!=1||n<= 0) 
	{
        printf("输入错误，请输入一个正整数\n");
        return;
    }
    // 找到链表的尾部
    DuLNode* tail=L->head;
    while(tail->next!=NULL) 
	{
        tail=tail->next;
    }
    for(int i=0;i<n;i++) 
	{
        printf("请输入第%d个元素：",i + 1);
        if(scanf("%d", &data)!=1) 
		{
            printf("输入错误，请输入一个整数\n");
            while(getchar()!='\n'); // 清除输入缓冲区
            continue;
        }
		DuLNode* newNode=(DuLNode*)malloc(sizeof(DuLNode));
		if(newNode==NULL)
		{
			printf("内存分配失败\n");
			return;	
		}	
		
		newNode->data=data;//将输入的数据给新结点的数据 
        newNode->next=NULL;//将新结点的next指针置为NULL 
        newNode->prior=tail;//将新结点的prior指针指向当前的尾结点 
        tail->next=newNode;//将当前结点的next指针指向新结点 
        tail=newNode;//更新尾结点 
	} 
    system("pause"); // 暂停程序
}

void printlist(DuLinkedList* L) //打印链表 
{
    DuLNode* current = L->head->next;//从头结点的下一个结点开始遍历
    if (current==NULL)//考虑链表为空的情况 
	{
        printf("链表为空\n");
        return;
    }
    printf("链表中的元素为：\n");
    while(current!=NULL)//不是空的情况 
	{
        printf("%d",current->data);//打印当前结点的数据
        current=current->next;//移动到下一个节点
		printf("\n");
    }
    system("pause"); // 暂停程序
}

void clearlist(DuLinkedList* L)
{
    DuLNode*p=L->head;//指向当前节点
    DuLNode*q=NULL;//指向下一个节点
    while(p!=NULL)//遍历链表并释放节点
	{
        q=p->next;//获取下一个节点
        free(p);//释放当前节点
        p = q;//移动到下一个节点
    }
    // 重置头结点
    L->head = NULL;
    printf("已成功清空链表！\n");
	system("pause");//暂停程序
}

void searchlist(DuLinkedList* L)
{
	printf("请输入要查找的data：");
	int data;
	if(scanf("%d", &data)!=1) 
	{
        printf("输入错误，请输入一个整数\n");
        return;
    }
	DuLNode* move=L->head->next;//从头结点的下一个结点开始遍历
    while(move!=NULL)//不是空的情况
    {
        if(move->data==data) //查询对应的data 
        {
			printf("确实存在这么一个data\n"); 
			printf("%d\n",move->data); 
			return;//返回找到的节点指针
        }
        move=move->next; //移动到下一个节点
    }
	printf("未找到指定data！！！\n");
	system("pause");//暂停程序
}

void modifylist(DuLinkedList* L)//修改 
{
    printf("请输入要修改的data：");
    int oldData;
    if(scanf("%d",&oldData)!=1) //输入要修改的data，这里称为olddata 
	{
        printf("输入无效，请输入一个整数\n");
        return;
    }
    DuLNode* move=L->head;
    while(move!=NULL) 
	{
        if(move->data==oldData)
		{
            printf("请输入新的data：");
            int newData;
            if(scanf("%d", &newData)!=1) 
			{
                printf("输入错误，请输入一个整数\n");
                return;
            }
            move->data=newData;
            printf("修改成功！新的data为：%d\n", newData);
            return;
        }
        move = move->next;
    }
    printf("未找到指定data！！！\n");
    system("pause"); // 暂停程序
}

void deletelist(DuLinkedList* L)//删除指定元素
{
	printf("请输入要删除的data:\n");
    int data;
    if(scanf("%d", &data)!= 1) 
	{
        printf("输入错误，请输入一个整数\n");
        return;
    }

    DuLNode* move=L->head;//move指针用于遍历链表，指向链表头结点 
    DuLNode* prev=NULL;//prev用于记录前一个结点，指向空 
    while(move!=NULL) //遍历链表 
	{
        if(move->data==data) 
		{
            if(prev==NULL) //如果要删除的是头结点
			{ 
                L->head=move->next;//将链表的头指针 L->head 指向当前节点的下一个节点 move->next
                if(L->head!=NULL) //如果新的头节点不为 NULL，则将其 prior 指针设置为 NULL
				{
                    L->head->prior=NULL;
                }
            } 
			else //要删除的是中间结点或者尾结点 
			{
                prev->next=move->next;//将前一个节点 prev 的 next 指针指向当前节点的下一个节点 move->next
                if(move->next!=NULL) 
				{
                    move->next->prior=prev;//如果当前节点的下一个节点不为 NULL，则将其 prior 指针设置为 prev
                }
            }
            free(move);//释放内存空间。
            printf("删除成功！\n");
            return;
        }
        prev=move;//如果当前结点不是要删除的节点
        move=move->next;//prev更新为当前节点 move并将 move更新为下一个节点 move->next
    }
    printf("未找到指定data！！！\n");//如果前面的都没找到，那么就是没有找到data了 
    system("pause"); // 暂停程序
} 

void findmiddle(DuLinkedList* L)//快慢指针法 
{
	if(L->head==NULL||L->head->next==NULL) 
	{
        printf("链表为空或只有一个节点，没有中间值\n");
        return;
    }
    DuLNode* slow=L->head->next;//慢指针指向第一个实际数据节点
    DuLNode* fast=L->head->next;//快指针指向第一个实际数据节点

    while(fast!=NULL&&fast->next!=NULL) 
	{
        slow=slow->next;         // 慢指针移动一步
        fast=fast->next->next;   // 快指针移动两步
    }

    printf("链表的中间值是: %d\n", slow->data);
    system("pause"); // 暂停程序
}

void insertlist(DuLinkedList* L)//遍历链表，新结点插入到上一个结点的尾部，下一个结点的头部 
{
    int position,data;
    printf("请输入要插入的位置：\n");
    if(scanf("%d",&position)!=1||position<=0) 
	{
        printf("输入错误，请输入一个正整数\n");
        return;
    }
    printf("请输入要插入的数据：\n");
    if(scanf("%d",&data)!=1) 
	{
        printf("输入错误，请输入一个整数\n");
        return;
    }
    DuLNode* newNode=(DuLNode*)malloc(sizeof(DuLNode)); // 分配内存给新节点
    if(newNode==NULL) 
	{
        printf("内存分配失败\n");
        return;
    }
    newNode->data=data; // 新节点数据
    newNode->next=NULL; // 新节点 next 指针指向空
    newNode->prior=NULL; // 新节点 prior 指针指向空

    // 插入到头部的情况
    if(position == 1) 
	{
        newNode->next=L->head; // 新节点的 next 指向原头节点
        if(L->head!=NULL) 
		{
            L->head->prior=newNode; // 原头节点的 prior 指向新节点
        }
        L->head=newNode; // 更新头节点为新节点
        printf("插入成功！\n");
        return;
    }

    // 插入到其他位置
    DuLNode* current=L->head; // 定义一个指针 current 指向链表头节点
    for(int i=1;i<position-1&&current!=NULL;i++) 
	{
        current=current->next; // 移动 current 指针到插入位置的前一个节点
    }
    if(current==NULL) 
	{
        printf("位置超出链表长度\n");
        free(newNode); // 释放新节点的内存
        return;
    }
    // 插入新节点
    newNode->next=current->next; // 新节点的 next 指向 current 的下一个节点
    newNode->prior=current; // 新节点的 prior 指向 current
    if(current->next!=NULL) 
	{
        current->next->prior=newNode; // current 的下一个节点的 prior 指向新节点
    }
    current->next = newNode; // current 的 next 指向新节点
    printf("插入成功！\n");
}

int judgecycle(DuLinkedList* L)//判断成环 
{
	if(L->head==NULL||L->head->next==NULL) 
	{
		printf("链表为空或只有一个节点，不可能成环\n");
        return 0; //链表为空或只有一个节点，不可能成环
    }
    DuLNode* slow=L->head;
    DuLNode* fast= L->head;
    while (fast!=NULL&&fast->next!=NULL) 
	{
        slow = slow->next;//慢指针每次移动一个，快指针每次移动两个 
        fast = fast->next->next;   
        if(slow==fast) 
		{
			printf("链表成环\n"); 
            return 1; //如果快慢指针值相等就是碰到一起了，说明链表有环
        }
    }
    printf("链表不成环\n");
    return 0; // 快指针到达链表末尾，说明链表无环
}

int main() 
{

    system("color F0"); //设置窗口颜色 
	char password[20];//声明一个字符数组password，用于存储用户输入的密码
	DuLinkedList L;
    initList(&L);   
    menu();//调用打印菜单的函数 
	printf("请输入您的密码：\n");
	scanf("%s",password);

    system("pause");//使程序暂停执行
	system("cls");
	
    if(strcmp(password,"1234")==0)
    {
    	printf("欢迎进入！！！\n"); 
   		menu();
   		while (1) // 交互功能界面设置 
		{ 
        	int chose;
        	scanf("%d", &chose);
       		switch (chose) 
			{
				case 1:inputdata(&L);//录入 
						break;
       	 	    case 2:printlist(&L);//打印 
						break;
           		case 3:clearlist(&L);// 清空 
						break; 
				case 4:searchlist(&L);//查找 
						break; 
				case 5:modifylist(&L);//修改 
						break;
				case 6:deletelist(&L);//删除 
						break; 
				case 7:findmiddle(&L);//找到双链表的中点
						break;
				case 8:insertlist(&L);//插入数据
						break; 
				case 9:judgecycle(&L);//判断双链表是否成环 
						break; 
            	case 10: printf("退出，感谢您的使用，欢迎下次使用\n"); exit(0); // 退出系统 
            	default:printf("您的输入有误，请重新输入！！！\n"); 
						system("pause"); system("cls"); // 暂停程序，用户查看操作结果 ,接着进行清屏操作 
			}
  		 }
  	}
	else if(strcmp(password, "1234")!= 0)
    {
   		printf("输入错误！请重新输入\n");
    }
    printf("请选择功能\n");
    return 0;
}



